"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.styles = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _withStyles = _interopRequireDefault(require("@material-ui/core/styles/withStyles"));

var _colorManipulator = require("@material-ui/core/styles/colorManipulator");

var _ButtonBase = _interopRequireDefault(require("@material-ui/core/ButtonBase"));

// @inheritedComponent ButtonBase
var styles = function styles(theme) {
  return {
    /* Styles applied to the root element. */
    root: (0, _extends2.default)({}, theme.typography.button, {
      height: 32,
      minWidth: 48,
      margin: 0,
      padding: "".concat(theme.spacing.unit - 4, "px ").concat(theme.spacing.unit * 1.5, "px"),
      borderRadius: 2,
      color: (0, _colorManipulator.fade)(theme.palette.action.active, 0.38),
      '&$selected': {
        color: theme.palette.action.active,
        backgroundColor: (0, _colorManipulator.fade)(theme.palette.action.active, 0.2),
        '&:hover': {
          backgroundColor: (0, _colorManipulator.fade)(theme.palette.action.active, 0.25)
        }
      },
      '&$disabled': {
        color: (0, _colorManipulator.fade)(theme.palette.action.disabled, 0.12)
      },
      '&:hover': {
        textDecoration: 'none',
        // Reset on mouse devices
        backgroundColor: (0, _colorManipulator.fade)(theme.palette.text.primary, 0.12),
        '@media (hover: none)': {
          backgroundColor: 'transparent'
        },
        '&$disabled': {
          backgroundColor: 'transparent'
        }
      },
      '&:not(:first-child)': {
        borderTopLeftRadius: 0,
        borderBottomLeftRadius: 0
      },
      '&:not(:last-child)': {
        borderTopRightRadius: 0,
        borderBottomRightRadius: 0
      }
    }),

    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {},

    /* Styles applied to the root element if `selected={true}`. */
    selected: {},

    /* Styles applied to the `label` wrapper element. */
    label: {
      width: '100%',
      display: 'inherit',
      alignItems: 'inherit',
      justifyContent: 'inherit'
    }
  };
};

exports.styles = styles;

var ToggleButton =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(ToggleButton, _React$Component);

  function ToggleButton() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, ToggleButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ToggleButton)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.handleChange = function (event) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          onClick = _this$props.onClick,
          value = _this$props.value;

      if (onClick) {
        onClick(event, value);

        if (event.isDefaultPrevented()) {
          return;
        }
      }

      if (onChange) {
        onChange(event, value);
      }
    };

    return _this;
  }

  (0, _createClass2.default)(ToggleButton, [{
    key: "render",
    value: function render() {
      var _classNames;

      var _this$props2 = this.props,
          children = _this$props2.children,
          classNameProp = _this$props2.className,
          classes = _this$props2.classes,
          disableFocusRipple = _this$props2.disableFocusRipple,
          disabled = _this$props2.disabled,
          selected = _this$props2.selected,
          other = (0, _objectWithoutProperties2.default)(_this$props2, ["children", "className", "classes", "disableFocusRipple", "disabled", "selected"]);
      var className = (0, _classnames.default)(classes.root, (_classNames = {}, (0, _defineProperty2.default)(_classNames, classes.disabled, disabled), (0, _defineProperty2.default)(_classNames, classes.selected, selected), _classNames), classNameProp);
      return _react.default.createElement(_ButtonBase.default, (0, _extends2.default)({
        className: className,
        disabled: disabled,
        focusRipple: !disableFocusRipple,
        onClick: this.handleChange
      }, other), _react.default.createElement("span", {
        className: classes.label
      }, children));
    }
  }]);
  return ToggleButton;
}(_react.default.Component);

process.env.NODE_ENV !== "production" ? ToggleButton.propTypes = {
  /**
   * The content of the button.
   */
  children: _propTypes.default.node.isRequired,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css-api) below for more details.
   */
  classes: _propTypes.default.object.isRequired,

  /**
   * @ignore
   */
  className: _propTypes.default.string,

  /**
   * If `true`, the button will be disabled.
   */
  disabled: _propTypes.default.bool,

  /**
   * If `true`, the  keyboard focus ripple will be disabled.
   * `disableRipple` must also be true.
   */
  disableFocusRipple: _propTypes.default.bool,

  /**
   * If `true`, the ripple effect will be disabled.
   */
  disableRipple: _propTypes.default.bool,

  /**
   * @ignore
   */
  onChange: _propTypes.default.func,

  /**
   * @ignore
   */
  onClick: _propTypes.default.func,

  /**
   * If `true`, the button will be rendered in an active state.
   */
  selected: _propTypes.default.bool,

  /**
   * The value to associate with the button when selected in a
   * ToggleButtonGroup.
   */
  value: _propTypes.default.any.isRequired
} : void 0;
ToggleButton.defaultProps = {
  disabled: false,
  disableFocusRipple: false,
  disableRipple: false
};
ToggleButton.muiName = 'ToggleButton';

var _default = (0, _withStyles.default)(styles, {
  name: 'MuiToggleButton'
})(ToggleButton);

exports.default = _default;