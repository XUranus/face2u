"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.styles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _withStyles = _interopRequireDefault(require("@material-ui/core/styles/withStyles"));

var _hasValue = _interopRequireDefault(require("./hasValue"));

var _isValueSelected = _interopRequireDefault(require("./isValueSelected"));

var styles = function styles(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      transition: theme.transitions.create('background,box-shadow'),
      background: 'transparent',
      borderRadius: 2,
      overflow: 'hidden'
    },

    /* Styles applied to the root element if `selected={true}` or `selected="auto" and `value` set. */
    selected: {
      background: theme.palette.background.paper,
      boxShadow: theme.shadows[2]
    }
  };
};

exports.styles = styles;

var ToggleButtonGroup =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(ToggleButtonGroup, _React$Component);

  function ToggleButtonGroup() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, ToggleButtonGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ToggleButtonGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.handleChange = function (event, buttonValue) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          value = _this$props.value;

      if (!onChange) {
        return;
      }

      var index = value && value.indexOf(buttonValue);
      var newValue;

      if (value && index >= 0) {
        newValue = (0, _toConsumableArray2.default)(value);
        newValue.splice(index, 1);
      } else {
        newValue = value ? [].concat((0, _toConsumableArray2.default)(value), [buttonValue]) : [buttonValue];
      }

      onChange(event, newValue);
    };

    _this.handleExclusiveChange = function (event, buttonValue) {
      var _this$props2 = _this.props,
          onChange = _this$props2.onChange,
          value = _this$props2.value;

      if (!onChange) {
        return;
      }

      onChange(event, value === buttonValue ? null : buttonValue);
    };

    return _this;
  }

  (0, _createClass2.default)(ToggleButtonGroup, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          childrenProp = _this$props3.children,
          classNameProp = _this$props3.className,
          classes = _this$props3.classes,
          exclusive = _this$props3.exclusive,
          onChange = _this$props3.onChange,
          selectedProp = _this$props3.selected,
          value = _this$props3.value,
          other = (0, _objectWithoutProperties2.default)(_this$props3, ["children", "className", "classes", "exclusive", "onChange", "selected", "value"]);

      var children = _react.default.Children.map(childrenProp, function (child) {
        if (!_react.default.isValidElement(child)) {
          return null;
        }

        var _child$props = child.props,
            buttonSelected = _child$props.selected,
            buttonValue = _child$props.value;
        var selected = buttonSelected === undefined ? (0, _isValueSelected.default)(buttonValue, value) : buttonSelected;
        return _react.default.cloneElement(child, {
          selected: selected,
          onChange: exclusive ? _this2.handleExclusiveChange : _this2.handleChange
        });
      });

      var groupSelected = selectedProp === 'auto' ? (0, _hasValue.default)(value) : selectedProp;
      var className = (0, _classnames.default)(classes.root, (0, _defineProperty2.default)({}, classes.selected, groupSelected), classNameProp);
      return _react.default.createElement("div", (0, _extends2.default)({
        className: className
      }, other), children);
    }
  }]);
  return ToggleButtonGroup;
}(_react.default.Component);

process.env.NODE_ENV !== "production" ? ToggleButtonGroup.propTypes = {
  /**
   * The content of the button.
   */
  children: _propTypes.default.node.isRequired,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css-api) below for more details.
   */
  classes: _propTypes.default.object.isRequired,

  /**
   * @ignore
   */
  className: _propTypes.default.string,

  /**
   * If `true`, only allow one of the child ToggleButton values to be selected.
   */
  exclusive: _propTypes.default.bool,

  /**
   * Callback fired when the value changes.
   *
   * @param {object} event The event source of the callback
   * @param {object} value of the selected buttons. When `exclusive` is true
   * this is a single value; when false an array of selected values. If no value
   * is selected and `exclusive` is true the value is null; when false an empty array.
   */
  onChange: _propTypes.default.func,

  /**
   * If `true`, render the group in a selected state. If `auto` (the default)
   * render in a selected state if `value` is not empty.
   */
  selected: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['auto'])]),

  /**
   * The currently selected value within the group or an array of selected
   * values when `exclusive` is false.
   */
  value: _propTypes.default.any
} : void 0;
ToggleButtonGroup.defaultProps = {
  exclusive: false,
  selected: 'auto'
};

var _default = (0, _withStyles.default)(styles, {
  name: 'MuiToggleButtonGroup'
})(ToggleButtonGroup);

exports.default = _default;