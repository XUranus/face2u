"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _styles = require("@material-ui/core/styles");

var _utils = require("@material-ui/utils");

var _BreadcrumbCollapsed = _interopRequireDefault(require("./BreadcrumbCollapsed"));

var _BreadcrumbSeparator = _interopRequireDefault(require("./BreadcrumbSeparator"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var styles = {
  /* Styles applied to the root element. */
  root: {},

  /* Styles applied to the ol element. */
  ol: {
    display: 'flex',
    flexWrap: 'wrap',
    alignItems: 'center',
    padding: 0,
    // Reset
    margin: 0,
    // Reset
    '& li': {
      listStyle: 'none'
    }
  },

  /* Styles applied to the li element. */
  li: {},

  /* Styles applied to the separator element. */
  separator: {}
};

var Breadcrumbs =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(Breadcrumbs, _React$Component);

  function Breadcrumbs() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Breadcrumbs);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Breadcrumbs)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      expanded: false
    };

    _this.handleClickExpand = function () {
      _this.setState({
        expanded: true
      });
    };

    return _this;
  }

  (0, _createClass2.default)(Breadcrumbs, [{
    key: "insertSeparators",
    value: function insertSeparators(items) {
      var _this2 = this;

      return items.reduce(function (acc, current, index) {
        if (index < items.length - 1) {
          acc = acc.concat(current, _react.default.createElement(_BreadcrumbSeparator.default // eslint-disable-next-line react/no-array-index-key
          , {
            key: "separator-".concat(index),
            className: _this2.props.classes.separator
          }, _this2.props.separator));
        } else {
          acc.push(current);
        }

        return acc;
      }, []);
    }
  }, {
    key: "renderItemsBeforeAndAfter",
    value: function renderItemsBeforeAndAfter(allItems) {
      var _this$props = this.props,
          itemsBeforeCollapse = _this$props.itemsBeforeCollapse,
          itemsAfterCollapse = _this$props.itemsAfterCollapse; // This defends against someone passing weird data, to ensure that if all
      // items would be shown anyway, we just show all items without the EllipsisItem

      if (itemsBeforeCollapse + itemsAfterCollapse >= allItems.length) {
        return allItems;
      }

      return [].concat((0, _toConsumableArray2.default)(allItems.slice(0, itemsBeforeCollapse)), [_react.default.createElement(_BreadcrumbCollapsed.default, {
        key: "ellipsis",
        onClick: this.handleClickExpand
      })], (0, _toConsumableArray2.default)(allItems.slice(allItems.length - itemsAfterCollapse, allItems.length)));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          children = _this$props2.children,
          classes = _this$props2.classes,
          classNameProp = _this$props2.className,
          Component = _this$props2.component,
          itemsAfterCollapse = _this$props2.itemsAfterCollapse,
          itemsBeforeCollapse = _this$props2.itemsBeforeCollapse,
          maxItems = _this$props2.maxItems,
          separator = _this$props2.separator,
          other = (0, _objectWithoutProperties2.default)(_this$props2, ["children", "classes", "className", "component", "itemsAfterCollapse", "itemsBeforeCollapse", "maxItems", "separator"]);

      var allItems = _react.default.Children.toArray(children).filter(function (child) {
        return _react.default.isValidElement(child);
      }).map(function (child, index) {
        return _react.default.createElement("li", {
          className: classes.li,
          key: String(index)
        }, child);
      });

      return _react.default.createElement(_Typography.default, (0, _extends2.default)({
        component: Component,
        color: "textSecondary",
        className: (0, _classnames.default)(classes.root, classNameProp)
      }, other), _react.default.createElement("ol", {
        className: classes.ol
      }, this.insertSeparators(this.state.expanded || maxItems && allItems.length <= maxItems ? allItems : this.renderItemsBeforeAndAfter(allItems))));
    }
  }]);
  return Breadcrumbs;
}(_react.default.Component);

process.env.NODE_ENV !== "production" ? Breadcrumbs.propTypes = {
  /**
   * The breadcrumb children.
   */
  children: _propTypes.default.node.isRequired,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css-api) below for more details.
   */
  classes: _propTypes.default.object.isRequired,

  /**
   * @ignore
   */
  className: _propTypes.default.string,

  /**
   * The component used for the root node.
   * Either a string to use a DOM element or a component.
   * By default, it maps the variant to a good default headline component.
   */
  component: _utils.componentPropType,

  /**
   * If max items is exceeded, the number of items to show after the ellipsis.
   */
  itemsAfterCollapse: _propTypes.default.number,

  /**
   * If max items is exceeded, the number of items to show before the ellipsis.
   */
  itemsBeforeCollapse: _propTypes.default.number,

  /**
   * Specifies the maximum number of breadcrumbs to display. When there are more
   * than the maximum number, only the first and last will be shown, with an
   * ellipsis in between.
   */
  maxItems: _propTypes.default.number,

  /**
   * Custom separator node.
   */
  separator: _propTypes.default.node
} : void 0;
Breadcrumbs.defaultProps = {
  component: 'nav',
  itemsAfterCollapse: 1,
  itemsBeforeCollapse: 1,
  maxItems: 8,
  separator: '/'
};

var _default = (0, _styles.withStyles)(styles, {
  name: 'MuiBreadcrumbs'
})(Breadcrumbs);

exports.default = _default;